Metadata-Version: 2.4
Name: swap
Version: 1.0.0
Summary: Rota to Google Calendar Sync
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: google-api-python-client==2.39.0
Requires-Dist: google-auth==2.6.6
Requires-Dist: google-auth-oauthlib==0.4.6
Requires-Dist: google-auth-httplib2==0.1.0
Requires-Dist: pytz==2021.3
Requires-Dist: pydantic==2.7.4
Requires-Dist: pydantic-settings==2.3.4
Requires-Dist: PyYAML==6.0.1
Requires-Dist: SQLAlchemy==2.0.31
Requires-Dist: alembic==1.13.2
Requires-Dist: click==8.1.7
Requires-Dist: rich==13.7.1
Provides-Extra: dev
Requires-Dist: pytest==8.2.2; extra == "dev"
Requires-Dist: pytest-cov==5.0.0; extra == "dev"
Requires-Dist: black==24.4.2; extra == "dev"
Requires-Dist: isort==5.13.2; extra == "dev"
Requires-Dist: mypy==1.10.1; extra == "dev"

# Swap - Rota to Google Calendar Sync

A modern, well-structured Python application that synchronizes staff shift data from Google Spreadsheets to Google Calendar with intelligent change detection and caching.

## Features

- **Smart Configuration**: YAML files, environment variables, and sensible defaults
- **Data Persistence**: SQLite storage with change detection to minimize API calls
- **Modular Architecture**: Clean separation of concerns with proper error handling
- **CLI Interface**: Rich command-line interface with progress indicators
- **Multi-User Support**: Handle multiple staff members with separate calendars
- **Intelligent Parsing**: Robust parsing of various shift time formats

## Quick Start

### 1. Installation

```bash
# Clone or navigate to the project directory
cd swap

# Install dependencies
pip install -r requirements.txt
```

### 2. Configuration

The application supports multiple configuration methods with the following priority:
1. Environment variables (highest priority)
2. YAML configuration file
3. Default values (fallback)

#### Option A: Environment Variables
```bash
# Copy and edit the environment file
cp .env.example .env
# Edit .env with your settings
```

#### Option B: YAML Configuration  
```bash
# Copy and edit the config file
cp config/config.yaml.example config/config.yaml
# Edit config.yaml with your settings
```

#### Option C: Legacy Environment Variable
```bash
# For backward compatibility
export SERVICE_ACCOUNT_FILE="/path/to/your/service-account.json"
```

### 3. Google API Setup

1. Create a Google Cloud Project
2. Enable Google Sheets API and Google Calendar API
3. Create a Service Account and download the JSON credentials file
4. Set the path to this file in your configuration

### 4. Initialize Database

```bash
python src/main.py init-db
```

### 5. Run Synchronization

```bash
python src/main.py sync
```

## CLI Commands

### `sync`
Synchronize rota data to Google Calendar:
```bash
python src/main.py sync
python src/main.py sync --debug  # Enable debug logging
```

### `status`
Show current configuration and system status:
```bash
python src/main.py status
```

### `history`
View synchronization history:
```bash
python src/main.py history
python src/main.py history --limit 20  # Show last 20 entries
```

### `init-db`
Initialize or reset the database:
```bash
python src/main.py init-db
python src/main.py init-db --force  # Force re-initialization
```

## Configuration Reference

### Database Settings
```yaml
database:
  url: "sqlite:///swap.db"  # Database connection URL
  echo: false               # Enable SQL query logging
```

### Google API Settings
```yaml
google:
  service_account_file: "/path/to/service-account.json"
  spreadsheet_id: "your-spreadsheet-id"
  range_name: "Sheet1!A:M"
  timezone: "Europe/Dublin"
```

### Users Configuration
```yaml
users:
  - calendar_name: "Staff Member's Calendar"
    user_name: "StaffUsername"  # Must match name in spreadsheet
    emails_to_share:
      - "admin@example.com"
      - "staff@example.com"
```

## Architecture

The application follows a clean, modular architecture:

```
src/swap/
├── config/          # Configuration management
├── data/            # Database models and repositories
├── services/        # Business logic services
├── utils/           # Utility functions
└── cli.py           # Command line interface
```

### Key Components

- **Configuration**: Uses pydantic-settings for type-safe configuration
- **Database**: SQLAlchemy with SQLite for local data persistence
- **Services**: Modular services for Sheets, Calendar, and sync operations
- **Change Detection**: SHA256 hashing to detect data changes
- **Error Handling**: Comprehensive error handling with rich logging

## Data Flow

1. **Read**: Fetch rota data from Google Spreadsheet
2. **Parse**: Extract and validate shift information
3. **Store**: Save to local SQLite database with change detection
4. **Sync**: Update Google Calendar events only when data changes
5. **Track**: Record synchronization history and statistics

## Development

### Project Structure
```
swap/
├── src/swap/                 # Main application code
├── tests/                    # Test suite
├── config/                   # Configuration files
├── migrations/               # Database migrations
├── requirements.txt          # Dependencies
└── README.md                # This file
```

### Adding New Features

1. **Models**: Add database models in `src/swap/data/models.py`
2. **Services**: Create business logic in `src/swap/services/`
3. **CLI**: Add commands in `src/swap/cli.py`
4. **Configuration**: Extend settings in `src/swap/config/settings.py`

### Testing

```bash
# Install test dependencies
pip install pytest pytest-cov

# Run tests
pytest tests/

# Run tests with coverage
pytest --cov=src/swap tests/
```

## Troubleshooting

### Common Issues

1. **Authentication Error**: Ensure service account JSON file path is correct
2. **Permission Error**: Verify service account has access to spreadsheet and calendar
3. **Database Error**: Check database file permissions and path
4. **Import Error**: Ensure all dependencies are installed correctly

### Debug Mode

Enable debug mode for detailed logging:
```bash
python src/main.py sync --debug --log-level DEBUG
```

### Logs

The application uses structured logging with different levels:
- **INFO**: General operation information
- **WARNING**: Non-critical issues
- **ERROR**: Error conditions
- **DEBUG**: Detailed diagnostic information

## Migration from Legacy Version

If you're migrating from the original `aio.py`:

1. **Configuration**: Your existing `SERVICE_ACCOUNT_FILE` environment variable will work
2. **Data**: First run will import all existing data
3. **Functionality**: All existing features are preserved with improvements

## License

This project is provided as-is for internal use.
